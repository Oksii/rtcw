name: Docker Build and Release Detection

on:
  schedule:
    - cron: '0 */6 * * *'
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even if release exists'
        required: false
        default: 'false'
        type: boolean
      manual_release_url:
        description: 'Manual RTCWPro release URL (optional)'
        required: false
        default: ''
        type: string

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      release_id: ${{ steps.check.outputs.release_id }}
      release_tag: ${{ steps.check.outputs.release_tag }}
      manual_url: ${{ steps.check.outputs.manual_url }}
    steps:
      - name: Check for new RTCWPro release
        id: check
        run: |
          manual_url="${{ github.event.inputs.manual_release_url || '' }}"
          echo "manual_url=$manual_url" >> $GITHUB_OUTPUT

          if [[ -n "$manual_url" ]]; then
            echo "Manual release URL provided. Skipping GitHub release check."
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "release_id=dev" >> $GITHUB_OUTPUT
            echo "release_tag=manual" >> $GITHUB_OUTPUT
            exit 0
          fi

          latest_release=$(curl -fsL "https://api.github.com/repos/rtcwmp-com/rtcwPro/releases/latest")
          latest_id=$(echo "$latest_release" | jq -r '.id')
          latest_tag=$(echo "$latest_release" | jq -r '.tag_name')

          existing_tags=$(curl -fsL "https://registry.hub.docker.com/v2/repositories/rtcwdocker/rtcw/tags/" | jq -r '.results[].name' 2>/dev/null || echo "")

          should_build="false"
          if [[ "${{ github.event_name }}" == "push" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.force_build }}" == "true" ]]; then
              should_build="true"
              echo "Build forced by manual trigger"
            elif [[ "${{ github.event_name }}" == "push" ]]; then
              should_build="true"
              echo "Build triggered by push"
            elif ! echo "$existing_tags" | grep -q "^${latest_id}$"; then
              should_build="true"
              echo "Build triggered manually - new release: $latest_tag (ID: $latest_id)"
            else
              echo "Manual trigger - release $latest_tag already exists, use force_build to rebuild"
            fi
          elif ! echo "$existing_tags" | grep -q "^${latest_id}$"; then
            should_build="true"
            echo "New release detected: $latest_tag (ID: $latest_id)"
          else
            echo "Release $latest_tag already built"
          fi

          echo "should_build=$should_build" >> $GITHUB_OUTPUT
          echo "release_id=$latest_id" >> $GITHUB_OUTPUT
          echo "release_tag=$latest_tag" >> $GITHUB_OUTPUT

  build-and-push:
    runs-on: ubuntu-latest
    needs: check-release
    if: needs.check-release.outputs.should_build == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Determine Build Tags
        id: tags
        run: |
          if [[ "${{ needs.check-release.outputs.release_id }}" == "dev" ]]; then
            echo "image_tags=rtcwdocker/rtcw:dev" >> $GITHUB_OUTPUT
          else
            echo "image_tags=rtcwdocker/rtcw:latest,rtcwdocker/rtcw:${{ needs.check-release.outputs.release_id }}" >> $GITHUB_OUTPUT
          fi

      - name: Debug build args
        run: |
          echo "Release ID: ${{ needs.check-release.outputs.release_id }}"
          echo "Manual URL: ${{ needs.check-release.outputs.manual_url }}"

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.tags.outputs.image_tags }}
          build-args: |
            STATIC_URL_BASEGAME=${{ secrets.STATIC_URL_BASEGAME }}
            RTCWPRO_RELEASE_ID=${{ needs.check-release.outputs.release_id }}
            RTCWPRO_RELEASE_URL=${{ needs.check-release.outputs.manual_url }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  send-api-request:
    runs-on: ubuntu-latest
    needs: [check-release, build-and-push]
    if: needs.check-release.outputs.should_build == 'true'
    steps:
      - name: Check Domain Availability
        id: check_domain
        run: |
          reachable_domains=()
          for domain in ${{ secrets.SERVER_URL_LIST }}; do
            if nc -z -w 1 $domain 8080 &> /dev/null; then
              reachable_domains+=("$domain")
            fi
          done
          if [ ${#reachable_domains[@]} -eq 0 ]; then
            echo "No reachable domains found."
            exit 0
          else
            echo "reachable_domains=${reachable_domains[*]}" >> $GITHUB_OUTPUT
          fi

      - name: Send HTTP API Request
        if: steps.check_domain.outputs.reachable_domains
        run: |
          for domain in ${{ steps.check_domain.outputs.reachable_domains }}; do
            curl -X POST -H "Authorization: Bearer ${{ secrets.WATCHTOWER_API_TOKEN }}" http://$domain:8080/v1/update
          done
